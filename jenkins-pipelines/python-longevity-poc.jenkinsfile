pipeline {
    agent {
            label {
                label 'aws-sct-builders-eu-west-1-new'
            }
        }

    environment {
            AWS_ACCESS_KEY_ID     = credentials('qa-aws-secret-key-id')
            AWS_SECRET_ACCESS_KEY = credentials('qa-aws-secret-access-key')
            SCT_TEST_ID = UUID.randomUUID().toString()
        }
        parameters {
            string(defaultValue: "aws",
               description: 'aws|gce',
               name: 'backend')

            string(defaultValue: "eu-west-1",
               description: 'Supported: us-east-1|eu-west-1|eu-west-2|eu-north-1|random (randomly select region)',
               name: 'aws_region')
            string(defaultValue: "a",
               description: 'Availability zone',
               name: 'availability_zone')

            string(defaultValue: '', description: '', name: 'scylla_ami_id')
            string(defaultValue: '', description: '', name: 'gce_image_db')

            string(defaultValue: '',
                   description: 'cloud path for RPMs, s3:// or gs://',
                   name: 'update_db_packages')
            string(defaultValue: '', description: '', name: 'scylla_version')
            string(defaultValue: '', description: '', name: 'scylla_repo')
            string(defaultValue: '', description: '', name: 'scylla_mgmt_agent_version')

            string(defaultValue: '',
                   description: 'If empty - the default manager version will be taken',
                   name: 'scylla_mgmt_address')


        }
    stages {
        stage('Prepare python') {
            steps {
                sh "pip3 install virtualenv"
                sh "python3 -m virtualenv poc-venv"
                sh "source poc-venv/bin/activate && pip3 install invoke rich"
            }
        }
        stage('Checkout') {
                steps {
                    script {
                        completed_stages = [:]
                    }
                    dir('scylla-cluster-tests') {
                        timeout(time: 5, unit: 'MINUTES') {
                            checkout scm

                            dir("scylla-qa-internal") {
                                git(url: 'git@github.com:scylladb/scylla-qa-internal.git',
                                    credentialsId:'b8a774da-0e46-4c91-9f74-09caebaea261',
                                    branch: 'master')
                            }
                        }
                    }
                }
            }
        stage('Get test duration') {
                steps {
                    catchError(stageResult: 'FAILURE') {
                        timeout(time: 1, unit: 'MINUTES') {
                            script {
                                    dir('scylla-cluster-tests') {
                                        sh "JENKINS_PARAMS='${params}' poc-venv/bin/invoke sct.get-test-duration"
                                }
                            }
                        }
                    }
                }
            }
//         stage('Create SCT Runner') {
//                 steps {
//                     catchError(stageResult: 'FAILURE') {
//                         script {
//                             wrap([$class: 'BuildUser']) {
//                                 dir('scylla-cluster-tests') {
//                                     timeout(time: 5, unit: 'MINUTES') {
//                                         createSctRunner(params, runnerTimeout , builder.region)
//                                     }
//                                 }
//                             }
//                         }
//                     }
//                 }
//             }
        stage('Test') {
            steps {
                sh "poc-venv/bin/invoke test"
            }
        }
        stage('Package') {
            steps {
                sh "poc-venv/bin/invoke package"
            }
        }
    }
//     post {
//         always {
//             archiveArtifacts artifacts: 'report.html, log.html, output.xml'
//         }
//     }
}
